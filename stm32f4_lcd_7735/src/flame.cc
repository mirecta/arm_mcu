#include "flame.h"
#include <stdlib.h>

#define RGB(r,g,b) (((b >> 3) << 11) | ((g >> 2) << 5) | ((r>> 3)))



const uint16_t pal[256] = {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x1,0x22,0x22,0x22,0x22,0x22,0x22,0x22,0x23,0x23,0x23,0x23,0x43,0x44,0x44,0x44,0x44,0x44,0x45,0x45,0x45,0x65,0x66,0x66,0x66,0x66,0x67,0x87,0x87,0x87,0x88,0x88,0x88,0xa9,0xa9,0xa9,0xaa,0xaa,0xca,0xcb,0xcb,0xcb,0xeb,0xec,0xec,0xec,0x10d,0x10d,0x10d,0x10e,0x12e,0x12f,0x12f,0x12f,0x150,0x150,0x150,0x171,0x171,0x171,0x192,0x192,0x192,0x1b3,0x1b3,0x1b3,0x1d4,0x1d4,0x1d4,0x1f4,0x1f5,0x1f5,0x215,0x216,0x216,0x236,0x237,0x257,0x257,0x257,0x278,0x278,0x298,0x298,0x299,0x2b9,0x2b9,0x2b9,0x2da,0x2da,0x2fa,0x2fa,0x2fa,0x31b,0x31b,0x33b,0xb3b,0xb5b,0xb5b,0x35c,0xb7c,0xb7c,0xb9c,0xb9c,0xbbc,0xbbc,0xbbd,0xbdd,0xbdd,0xbfd,0xbfd,0xc1d,0xc1d,0xc1d,0xc3d,0xc3e,0xc5e,0xc5e,0xc7e,0xc7e,0xc7e,0xc9e,0xc9e,0xcbe,0xcbe,0xcbe,0xcde,0xcde,0xcfe,0xcfe,0xd1e,0xd1e,0xd1f,0x153f,0x153f,0x155f,0x155f,0x155f,0x157f,0x157f,0x157f,0x159f,0x159f,0x15bf,0x15bf,0x15bf,0x15df,0x15df,0x15df,0x15ff,0x15ff,0x15ff,0x161f,0x161f,0x161f,0x163f,0x163f,0x165f,0x165f,0x1e5f,0x1e5f,0x1e5f,0x1e7f,0x1e7f,0x1e7f,0x1e9f,0x1e9f,0x1e9f,0x1e9f,0x1ebf,0x1ebf,0x1ebf,0x1ebf,0x1edf,0x1edf,0x1edf,0x1edf,0x1eff,0x1eff,0x1eff,0x1eff,0x26ff,0x271f,0x271f,0x271f,0x271f,0x271f,0x273f,0x273f,0x273f,0x273f,0x273f,0x273f,0x275f,0x275f,0x275f,0x275f,0x275f,0x275f,0x277f,0x2f7f,0x2f7f,0x2f7f,0x2f7f,0x2f7f,0x2f7f,0x2f7f,0x2f9f,0x2f9f,0x2f9f,0x2f9f,0x2f9f,0x2f9f};

Flame::Flame(){

    for(int i = 0 ; i < FLAME_WIDTH * FLAME_HEIGHT; ++i){
        _data[i] = 0;
    }
}


void Flame::compute(uint8_t power, bool randomize){
//fill with random bottom line

    if (randomize){
        for (int i = 0; i < FLAME_WIDTH; ++i){
            _data[LAST_LINE+i] = (rand() % (power)) ;
        }
    }

    //now compute flame
    for(int y = FLAME_HEIGHT - 2; y >=0; --y){
        for (int x = 0; x < FLAME_WIDTH; ++x){
            int pos = FLAME_WIDTH * y + x;
            if(x == FLAME_WIDTH -1){
                _data[pos] = (_data[pos] 
                            + 4*_data[pos+FLAME_WIDTH] 
                            + _data[pos+FLAME_WIDTH - 1])/6;

            }
            else if( x == 0){
                _data[pos] = (_data[pos] 
                            + 4*_data[pos+FLAME_WIDTH] 
                            + _data[pos+FLAME_WIDTH + 1])/6;
            }else{
                _data[pos] = (_data[pos] 
                            + 4*_data[pos+FLAME_WIDTH] 
                            + _data[pos+FLAME_WIDTH + 1] 
                            + _data[pos+FLAME_WIDTH - 1])/7;

            }
            if(y < FLAME_HEIGHT){
                _data[pos] = _data[pos] - _data[pos]/(1*y);
            }

        }
    }
}

uint16_t Flame::getColor(uint8_t heat){


    
    return pal[heat];
}
